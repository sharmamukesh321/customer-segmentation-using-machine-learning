# -*- coding: utf-8 -*-
"""Customer Segmentation Using Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ORV0hm2PbSxI0RB7RbpkzxzCWx_sD5W

Import libraries and datasets
"""

import pandas as pd
import numpy as np #for numerical data
import seaborn as sns  #3d plot
import matplotlib.pyplot as plt #2d plot
from sklearn.preprocessing  import StandardScaler, normalize #inbluid ml algo
from sklearn.cluster import KMeans  #clustering
from sklearn.decomposition import PCA #reduction



creditcard_df = pd.read_csv('marketing_data.csv')

creditcard_df

creditcard_df.info()

"""avg,min,max

"""

creditcard_df['BALANCE'].mean()

creditcard_df['BALANCE'].max()

creditcard_df['BALANCE'].min()

creditcard_df.describe()

"""Customer who made max "ONEOFF_PURCHASES"""

creditcard_df[creditcard_df['ONEOFF_PURCHASES']==40761.25]

creditcard_df['CASH_ADVANCE'].max()

creditcard_df[creditcard_df['CASH_ADVANCE']==47137.21176]

"""Visualization of dtaset

"""

sns.heatmap(creditcard_df.isnull(),yticklabels=False,cbar=False, cmap="Blues")

creditcard_df.isnull().sum()

creditcard_df.loc[(creditcard_df['MINIMUM_PAYMENTS'].isnull()==True), 'MINIMUM_PAYMENTS']=creditcard_df['MINIMUM_PAYMENTS'].mean()

creditcard_df.isnull().sum()

creditcard_df.loc[(creditcard_df['CREDIT_LIMIT'].isnull()==True), 'CREDIT_LIMIT']=creditcard_df['CREDIT_LIMIT'].mean()

sns.heatmap(creditcard_df.isnull(),yticklabels=False,cbar=False, cmap="Blues")

creditcard_df.duplicated().sum()

creditcard_df.drop('CUST_ID', axis=1,inplace=True)

creditcard_df

len(creditcard_df.columns)

creditcard_df.columns

"""Distplot combination of matplotlib.hist function and seaborn kdeplot()
KDE-Kernal density estimate
KDE for visualization probability density of a continuous variable
"""

plt.figure(figsize=(10,50))
for i in range(len(creditcard_df.columns)):
  plt.subplot(17,1,i+1)
  sns.distplot(creditcard_df[creditcard_df.columns[i]],kde_kws={"color":"b","lw":3,"label":"KDE"},hist_kws={"color":"g"})
  plt.title(creditcard_df.columns[i])


  plt.tight_layout()

"""correlation matrix between features"""

correlations = creditcard_df.corr()
f,ax=plt.subplots(figsize=(20,10))
sns.heatmap(correlations,annot=True)

"""Kmeans algo

"""

scaler=StandardScaler()
creditcard_df_s = scaler.fit_transform(creditcard_df)
creditcard_df_s.shape

creditcard_df_s

#Elbow method wcss

scores=[]

range_values=range(1,20)

for i in range_values:
  kmean = KMeans(n_clusters=i)
  kmean.fit(creditcard_df_s)
  scores.append(kmean.inertia_)
plt.plot(scores,'bx-')

#kmean

kmeans = KMeans(7)
kmeans.fit(creditcard_df_s)

label = kmeans.labels_
label

kmeans.cluster_centers_.shape

cluster_centers = pd.DataFrame(data=kmeans.cluster_centers_,columns = [creditcard_df.columns])

cluster_centers

cluster_centers = scaler.inverse_transform(cluster_centers)

cluster_centers = pd.DataFrame(data=kmeans.cluster_centers_,columns = [creditcard_df.columns])
cluster_centers

label.shape

label.max()

label.min()

y = kmeans.fit_predict(creditcard_df_s)
y

creditcard_df_cluster = pd.concat([creditcard_df,pd.DataFrame({'cluster':label})],axis=1)

creditcard_df_cluster



"""Visualization"""

for i in creditcard_df.columns:
  plt.figure(figsize=(35,5))
  for j in range(7):
    plt.subplot(1,7,j+1)
    cluster=creditcard_df_cluster[creditcard_df_cluster['cluster']==j]
    cluster[i].hist(bins=20)
  plt.show()

#dimension reduction

pca = PCA(n_components=2)
principal_comp = pca.fit_transform(creditcard_df_s)
principal_comp

pca_df = pd.DataFrame(data=principal_comp,columns=['pca1','pca2'])
pca_df

pca_df=pd.concat([pca_df,pd.DataFrame({'cluster':label})],axis=1)
pca_df

plt.figure(figsize=(10,10))
ax = sns.scatterplot(x="pca1",y="pca2", hue="cluster", data=pca_df,palette=['red','green','blue','yellow','pink','gray','purple'])
plt.show()

